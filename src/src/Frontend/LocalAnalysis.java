/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Backend.Analysis.AnalysisCompare;
import Backend.Analysis.AnalysisCompare.CompareResult;
import Backend.Analysis.SimpleAnalysis;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Ethan
 */
public class LocalAnalysis extends javax.swing.JFrame {

    private static File lastDirectory = new File(System.getProperty("user.dir"));

    /**
     * Creates new form LocalAnalysis
     */
    public LocalAnalysis() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AnalyzeInfo = new javax.swing.JLabel();
        ImportInfo = new javax.swing.JLabel();
        CompareButton = new javax.swing.JButton();
        AnalyzeButton = new javax.swing.JButton();
        ProgressBar = new javax.swing.JProgressBar();
        BetaProTip = new javax.swing.JLabel();
        ErrorStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AnalyzeInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AnalyzeInfo.setText("Click the analyze button to analyze a single audio file and graph the some of its characteristics.");

        ImportInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ImportInfo.setText("Click the import button to compare multiple .mp3 and .wav files on your computer.");

        CompareButton.setText("Compare");
        CompareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompareButtonActionPerformed(evt);
            }
        });

        AnalyzeButton.setText("Analyze");
        AnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalyzeButtonActionPerformed(evt);
            }
        });

        BetaProTip.setText("(Beta Pro Tip: Some .mp3 files will not scan, but converting them to .wav will fix it.)");

        ErrorStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorStatus.setText("Failed to scan music.");
        ErrorStatus.setToolTipText("");
        ErrorStatus.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(CompareButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AnalyzeButton)
                .addGap(130, 130, 130))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BetaProTip)
                    .addComponent(ImportInfo))
                .addGap(71, 71, 71))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AnalyzeInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ErrorStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(ImportInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BetaProTip)
                .addGap(28, 28, 28)
                .addComponent(AnalyzeInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CompareButton)
                    .addComponent(AnalyzeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ErrorStatus)
                .addGap(60, 60, 60)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalyzeButtonActionPerformed
        System.out.println("LocalAnalysis: Analyze Button Clicked");

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(lastDirectory);
        fc.setMultiSelectionEnabled(false);

        FileFilter ff = new FileNameExtensionFilter("MP3 and WAV", "mp3", "wav");
        fc.addChoosableFileFilter(ff);
        fc.setFileFilter(ff);

        int response = fc.showOpenDialog(this);
        if (response == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filepath = file.getPath();
            System.out.println("LocalAnalysis: File selected - " + filepath);

            try {
                SimpleAnalysis analysis = new SimpleAnalysis(filepath, true, true);

                LocalAnalysisResult result = new LocalAnalysisResult(file.getName(), analysis.getCharacteristics());
                result.setVisible(true);
                result.toFront();
            } catch (Exception e) {
                System.out.println("LocalAnalysis: Failed to scan " + filepath + ": " + e.getMessage());
                ErrorStatus.setText("Failed to scan " + filepath + ": " + e.getMessage());
                ErrorStatus.setVisible(true);
            }
        }

        lastDirectory = fc.getCurrentDirectory();
    }//GEN-LAST:event_AnalyzeButtonActionPerformed

    private void CompareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompareButtonActionPerformed
        System.out.println("LocalAnalysis: Compare Button Clicked");

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(lastDirectory);
        fc.setMultiSelectionEnabled(true);

        FileFilter ff = new FileNameExtensionFilter("MP3 and WAV", "mp3", "wav");
        fc.addChoosableFileFilter(ff);
        fc.setFileFilter(ff);

        int response = fc.showOpenDialog(this);
        if (response == JFileChooser.APPROVE_OPTION) {
            File[] files = fc.getSelectedFiles();
            String[] filepaths = new String[files.length];
            for (int i = 0; i < files.length; i++)
                filepaths[i] = files[i].getPath();
            System.out.println("LocalAnalysis: Files selected");
            SimpleAnalysis.main(filepaths);

            List<SimpleAnalysis> analyses = new ArrayList<>();
            ProgressBar.setMinimum(0);
            ProgressBar.setMaximum(files.length);

            for (int i = 0; i < files.length; i++) {
                ProgressBar.setValue(i);
                try {
                    ErrorStatus.setText("Scanning file " + files[i].getName());
                    ErrorStatus.setVisible(true);
                    analyses.add(new SimpleAnalysis(filepaths[i], true, true));
                } catch (Exception e) {
                    System.out.println("LocalAnalysis: Failed to scan " + filepaths[i] + " - " + e.getMessage());
                }
            }
            ProgressBar.setValue(ProgressBar.getMaximum());

            if (analyses.size() >= 2) {
                List<CompareResult> results = AnalysisCompare.compareAnalyses(analyses);
                //results = AnalysisCompare.mostAndLeastSimilar(results);

                LocalCompareResults compareResults = new LocalCompareResults(results);
                compareResults.setVisible(true);
                compareResults.toFront();
                ErrorStatus.setVisible(false);
            } else {
                ErrorStatus.setText("Need at least two songs to compare.");
            }
        }

        lastDirectory = fc.getCurrentDirectory();
    }//GEN-LAST:event_CompareButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocalAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocalAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocalAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocalAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LocalAnalysis().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalyzeButton;
    private javax.swing.JLabel AnalyzeInfo;
    private javax.swing.JLabel BetaProTip;
    private javax.swing.JButton CompareButton;
    private javax.swing.JLabel ErrorStatus;
    private javax.swing.JLabel ImportInfo;
    private javax.swing.JProgressBar ProgressBar;
    // End of variables declaration//GEN-END:variables
}
